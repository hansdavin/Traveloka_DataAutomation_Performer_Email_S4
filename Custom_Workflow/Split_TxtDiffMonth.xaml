<Activity mc:Ignorable="sap sap2010" x:Class="Split_TxtDiffMonth" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_strHeader" Type="InArgument(x:String)" />
    <x:Property Name="in_strRawFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_strSelectedColumn" Type="InArgument(x:String)" />
    <x:Property Name="in_datePeriod" Type="InArgument(s:DateTime)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1408,1381</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Split_TxtDiffMonth_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Split_TxtDiffMonth" sap:VirtualizedContainerService.HintSize="548,1316" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:String[]" Name="arrFilteredLines" />
      <Variable x:TypeArguments="x:String" Name="strRawTxtFile" />
      <Variable x:TypeArguments="x:String" Name="strFilename" />
      <Variable x:TypeArguments="x:String" Name="strBpKeyFolderPath" />
      <Variable x:TypeArguments="s:String[]" Name="arrLines" />
      <Variable x:TypeArguments="x:Boolean" Name="isFileExists" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ReadTextFile File="{x:Null}" Content="[strRawTxtFile]" DisplayName="Read Text File - Read txt raw file" FileName="[in_strRawFilePath]" sap:VirtualizedContainerService.HintSize="486,80" sap2010:WorkflowViewState.IdRef="ReadTextFile_1" />
    <ui:MultipleAssign sap2010:Annotation.AnnotationText="Multiple Assign - Read txt file per line, get default filename, get bpkey folder path" DisplayName="Multiple Assign - Read txt file per line, get default filename, get bpkey folder path" sap:VirtualizedContainerService.HintSize="486,205" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[strFilename]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.GetFileName(in_strFilePath)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[strBpKeyFolderPath]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(in_strFilePath)))]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="s:String[]">[arrLines]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="s:String[]">[strRawTxtFile.Split(Environment.NewLine.ToArray())]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="string[] lines = in_arrLines;&#xD;&#xA;&#xD;&#xA;// Find the index of the line with column headers&#xD;&#xA;int headerIndex = Array.FindIndex(lines, line =&gt; line.Contains(in_strHeader));&#xD;&#xA;Console.WriteLine($&quot;headerIndex: {headerIndex}&quot;);&#xD;&#xA;&#xD;&#xA;if(headerIndex != -1)&#xD;&#xA;{&#xD;&#xA;&#x9;// Split the header line into columns&#xD;&#xA;    string[] headerColumns = lines[headerIndex].Split(',');&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// Find the index of the selected column by comparing column names&#xD;&#xA;    int selectedColumnIndex = Array.IndexOf(headerColumns.Select(c =&gt; c.Trim()).ToArray(), in_strSelectedColumn);&#xD;&#xA;    Console.WriteLine($&quot;Selected Column: {in_strSelectedColumn}&quot;);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if (selectedColumnIndex != -1)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;// Construct the regex pattern using the index&#xD;&#xA;        string pattern = @&quot;.*,(?&gt;[^,]*,){selectedColumnIndex}[^,]*(in_datePeriod1|in_datePeriod2|in_datePeriod3),.*&quot;; //Find value after skipping n commas (selectedColumnIndex)&#xD;&#xA;        pattern = pattern.Replace(&quot;selectedColumnIndex&quot;, (selectedColumnIndex - 1).ToString()); //selectedColumnIndex should be-1, because total commas before desired value = selectedColumnIndex-1&#xD;&#xA;        pattern = pattern&#xD;&#xA;            .Replace(&quot;in_datePeriod1&quot;, in_datePeriod.ToString(&quot;MM-yy&quot;))&#xD;&#xA;            .Replace(&quot;in_datePeriod2&quot;, in_datePeriod.ToString(&quot;MM-yyyy&quot;))&#xD;&#xA;            .Replace(&quot;in_datePeriod3&quot;, in_datePeriod.ToString(&quot;M-yy&quot;));&#xD;&#xA;&#x9;&#x9;Console.WriteLine($&quot;pattern: {pattern}&quot;);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Create a list to store the filtered lines&#xD;&#xA;        List&lt;string&gt; filteredLines = new List&lt;string&gt;();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Add the non-filtered lines to the filteredLines list (maintain all text above header column)&#xD;&#xA;        for (int i = 0; i &lt;= headerIndex; i++)&#xD;&#xA;        {&#xD;&#xA;            filteredLines.Add(lines[i]);&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Add the filtered lines to the filteredLines list&#xD;&#xA;        for (int i = headerIndex + 1; i &lt; lines.Length; i++)&#xD;&#xA;        {&#xD;&#xA;            if (System.Text.RegularExpressions.Regex.IsMatch(lines[i], pattern))&#xD;&#xA;            {&#xD;&#xA;                filteredLines.Add(lines[i]);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Convert the filteredLines list to an array if needed&#xD;&#xA;        out_arrFilteredLines = filteredLines.ToArray();&#xD;&#xA;&#x9;&#x9;// Output the filtered array&#xD;&#xA;        foreach (string line in out_arrFilteredLines)&#xD;&#xA;        {&#xD;&#xA;            Console.WriteLine(line);&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;    {&#xD;&#xA;        Console.WriteLine(&quot;Selected column not found.&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    Console.WriteLine(&quot;Header line not found.&quot;);&#xD;&#xA;}" DisplayName="Invoke Code - Filtering data" sap:VirtualizedContainerService.HintSize="486,165" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_strRawTxtFile">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="strRawTxtFile" />
        </InArgument>
        <OutArgument x:TypeArguments="s:String[]" x:Key="out_arrFilteredLines">
          <VisualBasicReference x:TypeArguments="s:String[]" ExpressionText="arrFilteredLines" />
        </OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strSelectedColumn">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_strSelectedColumn" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_strHeader">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_strHeader" />
        </InArgument>
        <InArgument x:TypeArguments="s:DateTime" x:Key="in_datePeriod">
          <VisualBasicValue x:TypeArguments="s:DateTime" ExpressionText="in_datePeriod" />
        </InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_arrLines">
          <VisualBasicValue x:TypeArguments="s:String[]" ExpressionText="arrLines" />
        </InArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:FileExistsX DisplayName="File Exists" Exists="[isFileExists]" sap:VirtualizedContainerService.HintSize="486,133" sap2010:WorkflowViewState.IdRef="FileExistsX_1" Path="[in_strFilePath]" />
    <If Condition="[isFileExists]" DisplayName="If - file already exists delete first" sap:VirtualizedContainerService.HintSize="486,52" sap2010:WorkflowViewState.IdRef="If_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="376,168" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:DeleteFileX DisplayName="Delete File - Existing file" sap:VirtualizedContainerService.HintSize="334,80" sap2010:WorkflowViewState.IdRef="DeleteFileX_1" Path="[in_strFilePath]" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6" />
      </If.Else>
    </If>
    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="486,370" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[arrFilteredLines]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:String">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:String" Name="line" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="450,244" sap2010:WorkflowViewState.IdRef="Sequence_9">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:AppendLine File="{x:Null}" DisplayName="Append Line" FileName="[in_strFilePath]" sap:VirtualizedContainerService.HintSize="388,133" sap2010:WorkflowViewState.IdRef="AppendLine_1" Text="[line]" UseDefaultEncoding="False" />
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
  </Sequence>
</Activity>